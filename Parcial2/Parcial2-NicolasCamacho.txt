Nicolás Camacho Plazas - Parcial 2 Análisis de algoritmos

/////////////////////////////////////////////////////////////////////////////

1 Algoritmo de Kadane
1.1 - En programación dinámica se resuelven problemas dividiendolos en sub-problemas más pequeños 
para después construir la solución general a partir de estos (sub-estructura óptima). 
El algoritmo de Kadane tiene sub-estructura óptima puesto que el máximo sub-arreglo 
en una iteración, se calcula apartir de otro sub-problema superpuesto, el máximo sub-arreglo 
de la iteración anterior.

1.2 - Si debo conocer donde empieza y termina el máximo sub-arreglo, no es necesario  realizar
backtracking puesto que me es posible actualizar el inicio del sub-arreglo cada vez que encuento 
una mejor alternativa, y calcular el final sumando cada iteración en la que no se inicia un nuevo 
sub-arreglo.

1.3 - En cada iteración,  "a" contiene la suma del sub-arreglo máximo de la iteración anterior.

/////////////////////////////////////////////////////////////////////////////

2 El juego de la monedita
2.1 - Es un problema de programación dinámica porque para conocer la máxima cantidad de dinero que 
el jugador puede tener, se requiere calcular la máxima cantidad de dinero si quitara una moneda 
del inicio (y si el segundo jugador toma la del inicio o final en el siguiente turno) y la máxima cantidad de dinero si quitara una moneda del final (y si el segundo jugador toma la del inicio o final en el siguiente turno), lo que genera una estructura
óptima de subproblemas que se superponen.

2.2 - Entradas: Una secuencia de elementos S=< s_1 ∈ ℕ; i ∈ [1, n] > si n=|S| 
                donde el operador suma + está definido y la relación de orden
                parcial <: ℕxℕ está definida.
      Salidas:  Un valor x ∈ ℕ que representa la cantidad máxima de dinero que
                el primer jugador puede obtener.

2.3 - La tabla de memoización sería una matriz cuadrada de nxn en donde se guardaría el máximo dinero
que podría obtener el jugador. 
Suponiendo que i ∈ [1, n] y j ∈ [1, n], cuando i>j, en M[i][j] se encontraría la máxima cantidad de
dinero si la modena de la "izquierda" es S[i] y la de la "derecha" es S[j] puesto que en cada turno, 
en el momento en el que se toman las monedas,se acota la secuencia original de monedas por izquierda 
o por derecha.

2.4 
    a) Seudo-código:
    procedure TheCoinGame(S)
        if |S|%2 = 0 then
            min <- ∞
            index <- -1
            for i <- 1 to |S| do
                if S[i] < min then
                    index <- i
                    min <- S[i]
                end if
            end for
            S.removeElement(index)
        end if
        let M:[1...|S|]x[1...|S|] <- 0
        for i <- |S| downto 1 do
            for j <-1 to |S| do
                if i < j then
                    if i < |S| ∧ 0 < j - 1 then
                        a = M[i + 1][j - 1] + S[j]
                        b = M[i + 1][j - 1] + S[i]
                    else 
                        a = 0
                        b = 0
                    end if
                    if 0 < j - 2 then 
                        c = M[i][j - 2] + S[j]
                    else
                        c = 0
                    end if
                    if i + 1 < |S|
                        d = M[i + 2][j] + S[i]
                    else
                        d = 0
                    end if
                    M[i][j] = max(s, b, c, d)
                end if
            end for
        end for
        return M[0][|S|]
    end procedure
    
    b)Análisis de complejidad
        Realizando inspección de código se determina que el procedimiento "TheCoinGame" tiene un
        orden de complejidad O(N^2) donde N es el número de monedas con las que se jugará.
    
    c)Invariante
        La matriz de memoización M se llena correctamente en cada iteración, es decir, M[i][j] tiene
        la cantidad máxima de dinero que el jugador puede acumular si la fila de monedas está
        comprendidas entre i y j, suponiendo que i<j ∧ i,j ∈ [1, n] donde n = |S|.

2.5 - Si la idea del problema cambia a "ayudar, interactivamente, al primer jugador a ganar"; un
un posible algoritmo "greedy" estaría descrito por los siguientes pasos:
    1)El jugador introduce las secuencia de monedas con las que se jugará.
    2)El programa calcula (ver inciso "*") que moneda debe tomar el jugador para ganar lo máximo, ya
    sea la primera o la última.
    3)El jugador escribe que moneda tomó el contrincante en su turno, si aún quedan monedas se vuelve
    al paso 2, de lo contrario el programa termina.
    *)El programa recomienda al jugador tomar la mayor moneda (entre la primera y la última) de la secuencia dada
    por el jugador. Después, cuando el jugador indica que moneda tomó el contrincante, la elimina de la secuencia y vuelve a
    empezar (es decir, calcula cuál es la mayor moneda de las esquinas en la secuencia actualizada).
